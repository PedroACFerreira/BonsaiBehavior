<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.4.0-preview">
  <Workflow xmlns:q1="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q2="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q3="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns="https://bonsai-rx.org/2018/workflow">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:GetFiles">
          <q1:Path>C:\Users\User\Desktop\OFT Cropped</q1:Path>
          <q1:SearchPattern>*.avi</q1:SearchPattern>
          <q1:SearchOption>AllDirectories</q1:SearchOption>
        </Combinator>
      </Expression>
      <Expression xsi:type="q2:PythonTransform">
        <q2:Script>from natsort import natsorted
from System import Array

@returns(Array[str])
def process(value):


  List = list(value)
  
  List = natsorted(List)

  strArray = Array[str](List)

  return strArray
  </q2:Script>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Concat" />
      </Expression>
      <Expression xsi:type="SelectMany">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="RepeatCount">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="WindowWorkflow">
        <Workflow>
          <Nodes>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="Value" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="FileName" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FileCapture">
                <q3:FileName>C:\Users\User\Desktop\OFT Cropped\OFT 3\Trial   5.avi</q3:FileName>
                <q3:PlaybackRate>8388608</q3:PlaybackRate>
                <q3:StartPosition>0</q3:StartPosition>
                <q3:PositionUnits>Frames</q3:PositionUnits>
                <q3:Loop>false</q3:Loop>
                <q3:Playing>true</q3:Playing>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:Resize">
                <q3:Size>
                  <q3:Width>380</q3:Width>
                  <q3:Height>380</q3:Height>
                </q3:Size>
                <q3:Interpolation>Linear</q3:Interpolation>
              </Combinator>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>TIME</Name>
              <Description>TIME</Description>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Timestamp" />
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Timestamp</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Take">
                      <Count>1</Count>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="CombineLatest" />
                  </Expression>
                  <Expression xsi:type="Subtract" />
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="4" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="4" Label="Source2" />
                  <Edge From="4" To="5" Label="Source1" />
                  <Edge From="5" To="6" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>IMAGTREAT</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q3:ColorBalance">
                      <q3:Scale>
                        <q3:Val0>3.01</q3:Val0>
                        <q3:Val1>0.78</q3:Val1>
                        <q3:Val2>1.72</q3:Val2>
                        <q3:Val3>1.26</q3:Val3>
                      </q3:Scale>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q3:Grayscale" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q3:BackgroundSubtraction">
                      <q3:BackgroundFrames>75</q3:BackgroundFrames>
                      <q3:AdaptationRate>0</q3:AdaptationRate>
                      <q3:ThresholdValue>50</q3:ThresholdValue>
                      <q3:ThresholdType>Binary</q3:ThresholdType>
                      <q3:SubtractionMethod>Dark</q3:SubtractionMethod>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q3:Smooth">
                      <q3:SmoothType>Median</q3:SmoothType>
                      <q3:Size1>11</q3:Size1>
                      <q3:Size2>17</q3:Size2>
                      <q3:Sigma1>0</q3:Sigma1>
                      <q3:Sigma2>0</q3:Sigma2>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="4" To="5" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Skip">
                <Count>300</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FindContours">
                <q3:Mode>External</q3:Mode>
                <q3:Method>ChainApproxSimple</q3:Method>
                <q3:Offset>
                  <q3:X>0</q3:X>
                  <q3:Y>0</q3:Y>
                </q3:Offset>
                <q3:MinArea xsi:nil="true" />
                <q3:MaxArea xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>Settings</q2:Name>
              <q2:Script>from System import Tuple

#############################################
#    Here's the values to be set manually   #
################################################################################

VideoFR = 30      # Video frame rate (Frames per second)
TBinsEnable = 1   # Do you want time bins? (1/0)
Min = 10          # Minutes per time bin
Ratio = 0.12      # Conversion ratio pixel to centimeter
Error1 = 25       # Maximum number of pixels to move in one frame
Error5 = 100      # Maximum number pixels to move in five frames
Threshold = 1     # Minimum number of pixels to move on average in five frames
NumTBins = 6      # Total number of time bins pretended

################################################################################

TBins = [TBinsEnable,NumTBins]

################################################################################

@returns(Tuple[int,list,float,float,float,float,float])
def process(value):

  global VideoFR
  global Min
  global Ratio
  global Error1
  global Error5
  global Threshold
  global TBins

  return Tuple.Create(VideoFR,TBins,float(Min),float(Ratio),float(Error1),float(Error5),float(Threshold))</q2:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>Time bins</q2:Name>
              <q2:Script>from System import Tuple

# &gt;&gt;&gt; GLOBAL VARIABLES &lt;&lt;&lt;

VideoFR = 0   # Video frame rate
TBins = 0     # Do you want time bins? (True/False)
Min = 0       # Minutes per time bin

################

Counter = 0
TBinFR = Min * 60 * VideoFR

################

@returns(bool)
def process(value):

  global Counter
  global VideoFR
  global TBins
  global Min
  global TBinFR

  VideoFR = value.Item2.Item1
  TBins = value.Item2.Item2[0]
  Min = value.Item2.Item3
  
  Time = value.Item1.TotalMilliseconds

  TBinFR = Min * 60 * VideoFR

  if Time == 0:
    Counter = 0

  Counter += 1

  if Counter == TBinFR+1:
    Counter = 0
    return True
  else:
    return False</q2:Script>
            </Expression>
            <Expression xsi:type="Condition">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>C:\Users\User\Desktop\OFT Cropped\OFT 3\Trial   5.avi</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>NameToCSV</q2:Name>
              <q2:Script>a = []
b = []
c = ""

@returns(str)
def process(value):
  
  global a
  global b 
  global c

  a = value.split('\\')
  b = a[-1].split('.')
  VideoName = b[0]

  return VideoName</q2:Script>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>ROI</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q3:RoiActivity">
                      <q3:Regions>
                        <q3:ArrayOfPoint>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                        </q3:ArrayOfPoint>
                        <q3:ArrayOfPoint>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>1</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>1</q3:X>
                            <q3:Y>1</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>1</q3:Y>
                          </q3:Point>
                        </q3:ArrayOfPoint>
                        <q3:ArrayOfPoint>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>1</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>1</q3:X>
                            <q3:Y>375</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>375</q3:Y>
                          </q3:Point>
                        </q3:ArrayOfPoint>
                        <q3:ArrayOfPoint>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>375</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>375</q3:X>
                            <q3:Y>375</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>375</q3:Y>
                          </q3:Point>
                        </q3:ArrayOfPoint>
                        <q3:ArrayOfPoint>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>375</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>375</q3:X>
                            <q3:Y>1</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>1</q3:Y>
                          </q3:Point>
                        </q3:ArrayOfPoint>
                        <q3:ArrayOfPoint>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>1</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>1</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                        </q3:ArrayOfPoint>
                        <q3:ArrayOfPoint>
                          <q3:Point>
                            <q3:X>0</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>1</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                        </q3:ArrayOfPoint>
                        <q3:ArrayOfPoint>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>375</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>375</q3:X>
                            <q3:Y>125</q3:Y>
                          </q3:Point>
                        </q3:ArrayOfPoint>
                        <q3:ArrayOfPoint>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>125</q3:X>
                            <q3:Y>375</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>375</q3:Y>
                          </q3:Point>
                          <q3:Point>
                            <q3:X>250</q3:X>
                            <q3:Y>250</q3:Y>
                          </q3:Point>
                        </q3:ArrayOfPoint>
                      </q3:Regions>
                      <q3:Operation>Sum</q3:Operation>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Index">
                    <Operand xsi:type="IntProperty">
                      <Value>0</Value>
                    </Operand>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Activity.Val0</Selector>
                  </Expression>
                  <Expression xsi:type="Index">
                    <Operand xsi:type="IntProperty">
                      <Value>1</Value>
                    </Operand>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Activity.Val0</Selector>
                  </Expression>
                  <Expression xsi:type="Index">
                    <Operand xsi:type="IntProperty">
                      <Value>2</Value>
                    </Operand>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Activity.Val0</Selector>
                  </Expression>
                  <Expression xsi:type="Index">
                    <Operand xsi:type="IntProperty">
                      <Value>3</Value>
                    </Operand>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Activity.Val0</Selector>
                  </Expression>
                  <Expression xsi:type="Index">
                    <Operand xsi:type="IntProperty">
                      <Value>4</Value>
                    </Operand>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Activity.Val0</Selector>
                  </Expression>
                  <Expression xsi:type="Index">
                    <Operand xsi:type="IntProperty">
                      <Value>5</Value>
                    </Operand>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Activity.Val0</Selector>
                  </Expression>
                  <Expression xsi:type="Index">
                    <Operand xsi:type="IntProperty">
                      <Value>6</Value>
                    </Operand>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Activity.Val0</Selector>
                  </Expression>
                  <Expression xsi:type="Index">
                    <Operand xsi:type="IntProperty">
                      <Value>7</Value>
                    </Operand>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Activity.Val0</Selector>
                  </Expression>
                  <Expression xsi:type="Index">
                    <Operand xsi:type="IntProperty">
                      <Value>8</Value>
                    </Operand>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Activity.Val0</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Zip" />
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="1" To="4" Label="Source1" />
                  <Edge From="1" To="6" Label="Source1" />
                  <Edge From="1" To="8" Label="Source1" />
                  <Edge From="1" To="10" Label="Source1" />
                  <Edge From="1" To="12" Label="Source1" />
                  <Edge From="1" To="14" Label="Source1" />
                  <Edge From="1" To="16" Label="Source1" />
                  <Edge From="1" To="18" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="20" Label="Source1" />
                  <Edge From="4" To="5" Label="Source1" />
                  <Edge From="5" To="20" Label="Source2" />
                  <Edge From="6" To="7" Label="Source1" />
                  <Edge From="7" To="20" Label="Source3" />
                  <Edge From="8" To="9" Label="Source1" />
                  <Edge From="9" To="20" Label="Source4" />
                  <Edge From="10" To="11" Label="Source1" />
                  <Edge From="11" To="20" Label="Source5" />
                  <Edge From="12" To="13" Label="Source1" />
                  <Edge From="13" To="20" Label="Source6" />
                  <Edge From="14" To="15" Label="Source1" />
                  <Edge From="15" To="20" Label="Source7" />
                  <Edge From="16" To="17" Label="Source1" />
                  <Edge From="17" To="20" Label="Source8" />
                  <Edge From="18" To="19" Label="Source1" />
                  <Edge From="19" To="20" Label="Source9" />
                  <Edge From="20" To="21" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>Time in ROI</q2:Name>
              <q2:Script>from System import Tuple

# This node calculates the time spent in each ROI.

# Settings variables call

VideoFR = 0  # Video frame rate
TBins = 0  # Do you want time bins? (True/False)
Min = 0    # Minutes per time bin

################

Frame = 0
TBinFR = Min * 60 * VideoFR

TimeSpent = []
TSBPrev = []
TSBFinal = []
Bins = []

c = 0
MaxIndex = 0
counter = 0

################

@returns(Tuple[list,list])
def process(value):
  
  global Frame

  global VideoFR
  global TBins
  global Min
  global TBinFR
  global TimeSpent
  global TimeSpentBins
  global c
  global MaxIndex
  global counter
  global TSBPrev
  global TSBFinal

  global Bins

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  
  Time = value.Item1.TotalMilliseconds
  Frame += 1
  TBinFR = Min * 60 * VideoFR

  Center = value.Item4[0]
  TopLeft = value.Item4[1]
  TopRight = value.Item4[2]
  BottomLeft = value.Item4[3]
  BottomRight = value.Item4[4]
  CheckTop = value.Item4[5]
  CheckLeft = value.Item4[6]
  CheckRight = value.Item4[7]
  CheckBottom = value.Item4[8]

  Positions = [Center,TopLeft,TopRight,BottomLeft,BottomRight,CheckTop,CheckLeft,CheckRight,CheckBottom]

  for i in Positions:
    c = c + i

  if c &gt; 1:
    MaxIndex = Positions.index(max(Positions))

# Check to see if new video has begun, reset all values

  if Time == 0:
    Frame = 0
    c = 0
    MaxIndex = 0
    counter = 0
    TimeSpent = []
    TimeSpentBins = []
    TSBPrev = []
    TSBFinal = []
    counter = 0

# Adds up time spent in each place each frame

  if counter == 0:
    for i in range(5):
      TimeSpent.append(float(0))
      TSBPrev.append(float(0))
      Bins.append(float(0))
    counter = 1

  if c &gt; 1:
    if MaxIndex &lt; 5:
      TimeSpent[MaxIndex] += 1
      c = 0
    
# Time bin calculation
  
  if TBins == True:
    if Frame == TBinFR:
      Frame = 0
      BinsNow = []
      for i in range(5):
        BinsNow.append(TimeSpent[i])
      for i in range(5):
        Bins[i] = BinsNow[i] - TSBPrev[i]
      TSBPrev = BinsNow
      
# Results

  return Tuple.Create(TimeSpent, Bins)</q2:Script>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>NameToCSV</q2:Name>
              <q2:Script>@returns(str)
def process(value):
  
  a = value.split('\\')
  b = a[-1].split('.')
  c = b[0]
  d = ""
  for i in a[:-2]:
    d = d + i + '\\'
  e = d + "Data" + '.csv'

  return e</q2:Script>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="FileName" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Skip">
                <Count>200</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>Group TB Data</q2:Name>
              <q2:Script>from System import Tuple

##################

VideoName = ""

##################

@returns(Tuple[str,list])
def process(value):

  global VideoName
  
  VideoName = value.Item2
  List = value.Item1.Item2

  return Tuple.Create(VideoName,List)</q2:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Gate" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Skip">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>Group TB Data (2)</q2:Name>
              <q2:Script>from System import Tuple

DataCSV = ""
List = []
Counter = 0

@returns(list)
def process(value):
  
  global Counter
  global List
  global DataCSV

  VideoFR = value.Item2.Item1
  VideoName = value.Item1.Item1

  Time = value.Item3.TotalMilliseconds
  
  VList = value.Item1.Item2

  if Time == 0:
    DataCSV = ""
    List = []
    Counter = 0

  DataCSV = VideoName + ";" + ";" + ";" + str(VList[0]/VideoFR) + ";" + str(VList[1]/VideoFR) + ";" + str(VList[2]/VideoFR) + ";" + str(VList[3]/VideoFR) + ";" + str(VList[4]/VideoFR) + ";" + "\n"

  List.append(DataCSV)

  return List</q2:Script>
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>Group Data</q2:Name>
              <q2:Script>from System import Tuple

##################

VideoName = ""
Frame = 0

##################

@returns(list)
def process(value):

  global VideoName
  global Frame
  
  VideoFR = value.Item4.Item1
  VideoName = value.Item2
  Time = value.Item3.TotalMilliseconds
  
  if Time == 0:
    Frame = 0
  
  List = value.Item1.Item1

  Frame += 1

  DataCSV = VideoName + ";" + ";" + ";" + "Total;" + str(List[0]/VideoFR) + ";" + str(List[1]/VideoFR) + ";" + str(List[2]/VideoFR) + ";" + str(List[3]/VideoFR) + ";" + str(List[4]/VideoFR)
  
  return [DataCSV, Frame]
</q2:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="TakeLast">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q2:PythonTransform">
              <q2:Name>Data to CSV</q2:Name>
              <q2:Script>from System import Tuple

Header = 0
TBins = 1
Counter = 0 
Min = 0
VideoFR = 0
TotalValue = 0
Ratio = 0
VCenter = 0
VTopLeft = 0
VTopRight = 0
VBottomRight = 0
VBottomLeft = 0


@returns(str)
def process(value):

  global Header
  global TBins
  global Counter 
  global VideoFR
  global TotalValue 
  global Ratio

  global VCenter
  global VTopLeft 
  global VTopRight 
  global VBottomRight
  global VBottomLeft

  Ratio = value.Item3.Item4
  VideoFR = value.Item3.Item1
 
  TBins = value.Item3.Item2[0]
  FinalData = ""
  BinData = ""
  ActualMin = 0
  ActualMin2 = 0
  Timepoint = []
  Timepointz = ""

  Final = value.Item1[0]
  
  FolderPath = value.Item4.split('\\')
  Folder = FolderPath[-2]
  Counter = 0

  Frame = value.Item1[1]
  if (Frame + 300) &gt; 60*VideoFR:
    m , s = divmod(((Frame+300)/VideoFR), 60)
  else:
    m = 0
    s = int(round((Frame+300)/60,0))
  Min = value.Item3.Item3

  TBinFR = Min * 60 * VideoFR 
  

  if Header == 0:
    Header = 1
    FinalData += "Folder;" + "FileName;" + "ID;" + "Condition;" + "Time;" + "Center;" + "TopLeft;" + "TopRight;" + "BottomLeft;" + "BottomRight\n"

  if TBins == 1:

    for i in value.Item2:
      Counter += 1
      splitz = [x + ";" for x in i.split(";")]
      ActualMin = Min * Counter
      ActualMin2 = Min * (Counter-1)
      FileName = splitz[0]
      Minutes1 = str(int(round(ActualMin2-0.5,0))) + "min" + str(int(round(((ActualMin2-int(round(ActualMin2-0.5,0)))*60),0))) + "sec"
      if ActualMin2 == 0:
        Minutes1= "0min"
      Minutes2 = str(int(round(ActualMin-0.5,0))) + "min" + str(int(round(((ActualMin-int(round(ActualMin-0.5,0)))*60),0))) + "sec"
      TimePoint = [str(Minutes1) + " to " + str(Minutes2) + ";"]
      Data = splitz[:3] + TimePoint + splitz[3:-1]
      for a in Data:
        BinData += a
      FinalData += (Folder + ";" + BinData + "\n").replace(".",",")
      BinData = ""
      
      ValueSplit = i.split(";")
      ValueFinal = Final.split(";")
      VCenter += float(ValueSplit[-6])
      VTopLeft += float(ValueSplit[-5])
      VTopRight += float(ValueSplit[-4])
      VBottomLeft += float(ValueSplit[-3])
      VBottomRight += float(ValueSplit[-2])

    if Frame &gt;= ((Counter*TBinFR)+(TBinFR*0.1)): 

      Center = str(float(ValueFinal[-5]) - VCenter) + ";"
      TopLeft = str(float(ValueFinal[-4]) - VTopLeft) + ";"
      TopRight = str(float(ValueFinal[-5]) - VTopRight) + ";"
      BottomLeft = str(float(ValueFinal[-4]) - VBottomLeft) + ";"
      BottomRight = str(float(ValueFinal[-1]) - VBottomRight) + "\n"

      VCenter = 0
      VTopLeft = 0
      VTopRight = 0
      VBottomLeft = 0
      VBottomRight = 0

      Minutes1 = str(int(round(ActualMin-0.5,0))) + "min" + str(int(round(((ActualMin-int(round(ActualMin-0.5,0)))*60),0))) + "sec"
      TimePointz = Minutes1 + " to End;"
    
      FinalBin = Folder + ";" + FileName + " ;" + " ;" + TimePointz + Center + TopLeft + TopRight  + BottomLeft + BottomRight 
        
      FinalData += (FinalBin).replace(".",",")

  Counter = 0

  FinalData += (Folder + ";" + Final).replace(".",",")

  return FinalData</q2:Script>
            </Expression>
            <Expression xsi:type="q1:CsvWriter">
              <q1:FileName>C:\Users\User\Desktop\OFT Cropped\Data.csv</q1:FileName>
              <q1:Append>true</q1:Append>
              <q1:Overwrite>false</q1:Overwrite>
              <q1:Suffix>None</q1:Suffix>
              <q1:IncludeHeader>false</q1:IncludeHeader>
              <q1:Selector>it</q1:Selector>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="ReplaySubject">
              <Name>FileName</Name>
              <BufferSize xsi:nil="true" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="15" Label="Source2" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="5" To="7" Label="Source1" />
            <Edge From="6" To="18" Label="Source1" />
            <Edge From="6" To="12" Label="Source1" />
            <Edge From="6" To="29" Label="Source3" />
            <Edge From="6" To="23" Label="Source3" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="8" To="17" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="18" Label="Source2" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="10" To="15" Label="Source1" />
            <Edge From="11" To="12" Label="Source2" />
            <Edge From="11" To="18" Label="Source3" />
            <Edge From="11" To="29" Label="Source2" />
            <Edge From="11" To="33" Label="Source3" />
            <Edge From="11" To="23" Label="Source4" />
            <Edge From="12" To="13" Label="Source1" />
            <Edge From="13" To="14" Label="Source1" />
            <Edge From="14" To="27" Label="Source2" />
            <Edge From="15" To="16" Label="Source1" />
            <Edge From="16" To="23" Label="Source2" />
            <Edge From="17" To="18" Label="Source4" />
            <Edge From="18" To="19" Label="Source1" />
            <Edge From="19" To="23" Label="Source1" />
            <Edge From="20" To="21" Label="Source1" />
            <Edge From="20" To="33" Label="Source4" />
            <Edge From="21" To="22" Label="Source1" />
            <Edge From="22" To="35" Label="Source2" />
            <Edge From="23" To="24" Label="Source1" />
            <Edge From="23" To="26" Label="Source1" />
            <Edge From="23" To="31" Label="Source1" />
            <Edge From="24" To="25" Label="Source1" />
            <Edge From="26" To="27" Label="Source1" />
            <Edge From="27" To="28" Label="Source1" />
            <Edge From="28" To="29" Label="Source1" />
            <Edge From="29" To="30" Label="Source1" />
            <Edge From="30" To="33" Label="Source2" />
            <Edge From="31" To="32" Label="Source1" />
            <Edge From="32" To="33" Label="Source1" />
            <Edge From="33" To="34" Label="Source1" />
            <Edge From="34" To="35" Label="Source1" />
            <Edge From="36" To="37" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Concat" />
      </Expression>
    </Nodes>
    <Edges>
      <Edge From="0" To="1" Label="Source1" />
      <Edge From="1" To="2" Label="Source1" />
      <Edge From="2" To="3" Label="Source1" />
      <Edge From="3" To="4" Label="Source1" />
      <Edge From="4" To="5" Label="Source1" />
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Expressions.IndexBuilder, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.StringProperty, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.SubtractBuilder, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvWriter, Bonsai.System, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.GetFiles, Bonsai.System, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Concat, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Gate, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.RepeatCount, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Skip, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Take, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.TakeLast, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Timestamp, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.ColorBalance, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FileCapture, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Resize, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.RoiActivity, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Smooth, Bonsai.Vision, Version=2.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>