<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0">
  <Workflow xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q3="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:q2="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision" xmlns:q1="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Concat" />
      </Expression>
      <Expression xsi:type="WindowWorkflow">
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>Speed Average</q1:Name>
              <q1:Script>from System import Tuple

##### VALUES TO BE SET #####

# &gt;&gt;&gt; Here are the values that should be set manually &lt;&lt;&lt;

VideoFR = 0  # Video frame rate
TBins = 0  # Do you want time bins? (True/False)
Min = 0     # Minutes per time bin
Ratio = 0  # Conversion ratio pixel to centimeter
Error = 0   # Pixels to move in one frame to be considered an error

################

TDistance = 0
TBinsDistance = 0
Speed = 0
TBSpeed = 0
PrevTBDis = 0
Frame = 0
SpeedCounter = 0
TBSpeedCounter = 0
TBinFR = Min * 60 * VideoFR
Time = 0

################

@returns(Tuple[float,float,float])
def process(value):
  
  global TDistance
  global TBinsDistance
  global PrevTBDis
  global Speed
  global TBSpeed
  global SpeedCounter
  global TBSpeedCounter
  global Frame
  global Time

  global VideoFR
  global TBins
  global Min
  global Ratio
  global Error
  global TBinFR

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  Error = value.Item3.Item5

  Time = value.Item1.TotalMilliseconds
  Current = value.Item2
  Frame += 1
  SpeedCounter += 1
  TBSpeedCounter += 1
  TBinFR = Min * 60 * VideoFR

# Error handling

  if not Current &gt; -1:
    Current = 0
  if Current &gt; Error:
    Current = 0

# Check to see if new video has begun, reset all values

  if Time == 0:
    TDistance = 0
    TBinsDistance = 0
    Speed = 0
    TBSpeed = 0
    PrevTBDis = 0
    Frame = 0
    SpeedCounter = 0
    TBSpeedCounter = 0

# Adds up euclidean distance each frame and calculate speed

  TDistance = TDistance + Current
  
  if SpeedCounter != 0:
    Speed = ((TDistance*Ratio)/SpeedCounter)*VideoFR

# Time bin calculation

  if TBins == True:
    if Frame == TBinFR:
      Frame = 0
      TBinsDistance = TDistance - PrevTBDis
      PrevTBDis = TDistance
      TBSpeed = TBinsDistance*Ratio/TBSpeedCounter*VideoFR
      TBSpeedCounter = 0
 
# Results

  return Tuple.Create(float(Speed), float(TBSpeed), float(TBSpeedCounter))</q1:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>Total DistanceM</q1:Name>
              <q1:Script>from System import Tuple

##### VALUES TO BE SET #####

# &gt;&gt;&gt; Here are the values that should be set manually &lt;&lt;&lt;

VideoFR = 0  # Video frame rate
TBins = 0  # Do you want time bins? (True/False)
Min = 0     # Minutes per time bin
Ratio = 0  # Conversion ratio pixel to centimeter
Threshold = 0 # Movement threshold - min pixels moved on average, every 5 frames
Error = 0    # Pixels to move in five frames to be considered an error

################

MTDistance = 0
TBinsMDistance = 0
PrevTBMDis = 0
Accumulated = 0
Frame = 0
Counter = 0
TBinFR = Min * 60 * VideoFR

################

@returns(Tuple[float,float])
def process(value):
  
  global MTDistance
  global TBinsMDistance
  global PrevTBMDis
  global Counter
  global Accumulated
  global Frame

  global VideoFR
  global TBins
  global Min
  global Ratio
  global Error
  global Threshold
  global TBinFR

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  Error = value.Item3.Item6
  Threshold = value.Item3.Item7

  Time = value.Item1.TotalMilliseconds
  Current = value.Item2
  Frame += 1
  Counter += 1
  TBinFR = Min * 60 * VideoFR

# Error handling for NaN values

  if not Current &gt; -1:
    Current = 0
  if Current &gt; Error:
    Current = 0

# Accumulate distance travelled every five frames

  Accumulated += Current

# Check to see if new video has begun, reset all values

  if Time == 0:
    MTDistance = 0
    TBinsMDistance = 0
    PrevTBMDis = 0
    Accumulated = 0
    Frame = 0
    Counter = 0

# Adds up euclidean distance if animal is moving

  if Counter == 5:
    Counter = 0
    if Accumulated/5 &gt; Threshold:
      MTDistance = MTDistance + Accumulated
      Accumulated = 0
    else:
      Accumulated = 0

# Time bin calculation

  if TBins == True:
    if Frame == TBinFR:
      Frame = 0
      TBinsMDistance = MTDistance - PrevTBMDis
      PrevTBMDis = MTDistance

# Result

  return Tuple.Create(MTDistance*Ratio, TBinsMDistance*Ratio)</q1:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>Mobility</q1:Name>
              <q1:Script>from System import Tuple

##### VALUES TO BE SET #####

# &gt;&gt;&gt; Here are the values that should be set manually &lt;&lt;&lt;

VideoFR = 0  # Video frame rate
TBins = 0  # Do you want time bins? (True/False)
Min = 0      # Minutes per time bin
Ratio = 0  # Conversion ratio pixel to centimeter
Threshold = 0 # Movement threshold - min pixels moved on average, every 5 frames
Error = 0    # Pixels to move in five frames to be considered an error

################

Movement = 0
TBinsMovement = 0
PrevTBMovement = 0
Accumulated = 0
Frame = 0
Counter = 0

################

@returns(Tuple[float,float])
def process(value):
  
  global Movement
  global TBinsMovement
  global PrevTBMovement
  global Counter
  global Accumulated
  global Frame

  global VideoFR
  global TBins
  global Min
  global Ratio
  global Error
  global Threshold
  global TBinFR

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  Error = value.Item3.Item6
  Threshold = value.Item3.Item7

  Time = value.Item1.TotalMilliseconds
  Current = value.Item2
  Accumulated += Current
  Frame += 1
  Counter += 1
  TBinFR = Min * 60 * VideoFR

# Error handling for NaN values

  if not Current &gt; -1:
    Current = 0
  if Current &gt; Error:
    Current = 0

# Accumulate distance travelled every five frames

  Accumulated += Current

# Check to see if new video has begun, reset all values

  if Time == 0:
    Movement = 0
    TBinsMovement = 0
    PrevTBMovement = 0
    Accumulated = 0
    Frame = 0
    Counter = 0

# Adds up euclidean distance if animal is moving

  if Counter == 5:
    Counter = 0
    if Accumulated/5 &lt;= Threshold:
      Movement = Movement + 5
      Accumulated = 0
    else:
      Accumulated = 0

# Time bin calculation

  if TBins == True:
    if Frame == TBinFR:
      Frame = 0
      TBinsMovement = Movement - PrevTBMovement
      PrevTBMovement = Movement

# Result

  return Tuple.Create(float(Movement/VideoFR), float(TBinsMovement/VideoFR))</q1:Script>
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>Euclidean Distance</q1:Name>
              <q1:Script>import math
@returns(float)
def process(value):
  speed = math.sqrt(((value.Item1.X-value.Item2.X)**2)+((value.Item1.Y-value.Item2.Y)**2))
  return float(speed)</q1:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>Total Distance</q1:Name>
              <q1:Script>from System import Tuple

##### VALUES TO BE SET #####

# &gt;&gt;&gt; Here are the values that should be set manually &lt;&lt;&lt;

VideoFR = 0  # Video frame rate
TBins = 0  # Do you want time bins? (True/False)
Min = 0    # Minutes per time bin
Ratio = 0  # Conversion ratio pixel to centimeter
Error = 0    # Pixels to move in one frame to be considered an error

################

TDistance = 0
TBinsDistance = 0
PrevTBDis = 0
Frame = 0
TBinFR = Min * 60 * VideoFR

################

@returns(Tuple[float,float])
def process(value):
  
  global TDistance
  global TBinsDistance
  global PrevTBDis
  global Frame

  global VideoFR
  global TBins
  global Min
  global Ratio
  global Error
  global TBinFR

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  Error = value.Item3.Item5
  
  Time = value.Item1.TotalMilliseconds
  Current = value.Item2
  Frame += 1
  TBinFR = Min * 60 * VideoFR

# Error handling

  if not Current &gt; -1:
    Current = 0
  if Current &gt; Error:
    Current = 0

# Check to see if new video has begun, reset all values

  if Time == 0:
    Current = 0
    TDistance = 0
    TBinsDistance = 0
    Frame = 0
    PrevTBDis = 0

# Adds up euclidean distance each frame

  TDistance = TDistance + Current

# Time bin calculation

  if TBins == True:
    if Frame == TBinFR:
      Frame = 0
      TBinsDistance = TDistance - PrevTBDis
      PrevTBDis = TDistance

# Results

  return Tuple.Create(TDistance*Ratio, TBinsDistance*Ratio)</q1:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Skip">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Centroid</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:LargestBinaryRegion" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:BinaryRegionAnalysis" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:FindContours">
                <q2:Mode>External</q2:Mode>
                <q2:Method>ChainApproxSimple</q2:Method>
                <q2:Offset>
                  <q2:X>0</q2:X>
                  <q2:Y>0</q2:Y>
                </q2:Offset>
                <q2:MinArea xsi:nil="true" />
                <q2:MaxArea xsi:nil="true" />
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Skip">
                <Count>300</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:Smooth">
                <q2:SmoothType>Median</q2:SmoothType>
                <q2:Size1>11</q2:Size1>
                <q2:Size2>17</q2:Size2>
                <q2:Sigma1>0</q2:Sigma1>
                <q2:Sigma2>0</q2:Sigma2>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:BackgroundSubtraction">
                <q2:BackgroundFrames>75</q2:BackgroundFrames>
                <q2:AdaptationRate>0</q2:AdaptationRate>
                <q2:ThresholdValue>50</q2:ThresholdValue>
                <q2:ThresholdType>Binary</q2:ThresholdType>
                <q2:SubtractionMethod>Dark</q2:SubtractionMethod>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:Grayscale" />
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>Data Processing</q1:Name>
              <q1:Script>from System import Tuple

##################

VideoName = ""

##################

@returns(Tuple[str,str,str,str,str,str])
def process(value):

  global VideoName

  VideoName = value.Item6

  TBDistance = str(value.Item1.Item2) + ";"
  TBMDistance = str(value.Item2.Item2) + ";"
  TBSpeed = str(value.Item3.Item2) + ";"
  TBMSpeed = str(value.Item4.Item2) + ";"
  TBMobility = str(value.Item5.Item2)

  return Tuple.Create(VideoName,TBDistance,TBMDistance,TBSpeed,TBMSpeed,TBMobility)</q1:Script>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringFileCapture">
              <MemberName>FileName</MemberName>
              <Name>VideoName</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="ReplaySubject">
              <Name>FileName</Name>
              <BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:FileCapture">
                <q2:FileName>C:\Users\User\Desktop\Microglia Project\Behavior Data\Pedro Behavior\OFT - 11.11.18 1st cohort\Media Files\Trial     1.mpg</q2:FileName>
                <q2:PlaybackRate>256</q2:PlaybackRate>
                <q2:StartPosition>0</q2:StartPosition>
                <q2:PositionUnits>Frames</q2:PositionUnits>
                <q2:Loop>false</q2:Loop>
                <q2:Playing>true</q2:Playing>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Skip">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Subtract" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Timestamp</Selector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Take">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Timestamp" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>Speed AverageM</q1:Name>
              <q1:Script>from System import Tuple

##### VALUES TO BE SET #####

# &gt;&gt;&gt; Here are the values that should be set manually &lt;&lt;&lt;

VideoFR = 0  # Video frame rate
TBins = 0  # Do you want time bins? (True/False)
Min = 0    # Minutes per time bin
Ratio = 0  # Conversion ratio pixel to centimeter
Threshold = 0 # Movement threshold - min pixels moved on average, every 5 frames
Error = 0    # Pixels to move in five frames to be considered an error

################

TDistance = 0
TBinsDistance = 0
PrevTBDis = 0
MSpeed = 0
TBMSpeed = 0
Accumulated = 0
Frame = 0
Counter = 0
MSpeedCounter = 0
TBMSpeedCounter = 0
TBinFR = Min * 60 * VideoFR
Time = 0

################

@returns(Tuple[float,float,float])
def process(value):
  
  global TDistance
  global TBinsDistance
  global PrevTBDis
  global MSpeed
  global TBMSpeed
  global MSpeedCounter
  global TBMSpeedCounter
  global Accumulated
  global Frame
  global TBinFR
  global Counter
  global Time 

  global VideoFR
  global TBins
  global Min
  global Ratio
  global Error
  global Threshold
  global TBinFR

  VideoFR = value.Item3.Item1
  TBins = value.Item3.Item2[0]
  Min = value.Item3.Item3
  Ratio = value.Item3.Item4
  Error = value.Item3.Item6
  Threshold = value.Item3.Item7

  Time = value.Item1.TotalMilliseconds
  Current = value.Item2
  Accumulated += Current
  Frame += 1
  Counter += 1
  TBinFR = Min * 60 * VideoFR

# Error handling

  if not Current &gt; -1:
    Current = 0
  if Current &gt; Error:
    Current = 0

# Check to see if new video has begun, reset all values

  if Time == 0:
    TDistance = 0
    TBinsDistance = 0
    MSpeed = 0
    TBMSpeed = 0
    PrevTBDis = 0
    Accumulated = 0
    Frame = 0
    Counter = 0
    MSpeedCounter = 0
    TBMSpeedCounter = 0

# Adds up euclidean distance each frame and calculate speed

  if Counter == 5:
    Counter = 0
    if Accumulated/5 &gt; Threshold:
      TDistance = TDistance + Accumulated
      MSpeedCounter += 5
      TBMSpeedCounter += 5
      Accumulated = 0
    else:
      Accumulated = 0

  if MSpeedCounter != 0:
    MSpeed = TDistance*Ratio/MSpeedCounter*VideoFR
    
# Time bins calculation

  if TBins == True:
    if Frame == TBinFR:
      Frame = 0
      TBinsDistance = TDistance - PrevTBDis
      PrevTBDis = TDistance
      if TBMSpeedCounter != 0:
        TBMSpeed = TBinsDistance*Ratio/TBMSpeedCounter*VideoFR
        TBMSpeedCounter = 0
      else:
        TBMSpeed = 0
        TBMSpeedCounter = 0

# Results

  return Tuple.Create(float(MSpeed), float(TBMSpeed), float(TBMSpeedCounter))</q1:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:Crop">
                <q2:RegionOfInterest>
                  <q2:X>112</q2:X>
                  <q2:Y>17</q2:Y>
                  <q2:Width>428</q2:Width>
                  <q2:Height>405</q2:Height>
                </q2:RegionOfInterest>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q2:ColorBalance">
                <q2:Scale>
                  <q2:Val0>3.01</q2:Val0>
                  <q2:Val1>0.78</q2:Val1>
                  <q2:Val2>1.72</q2:Val2>
                  <q2:Val3>1.26</q2:Val3>
                </q2:Scale>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Gate" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Skip">
                <Count>200</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>Data Processing</q1:Name>
              <q1:Script>from System import Tuple

##################

VideoName = ""
Frame = 0

##################

@returns(list)
def process(value):

  global VideoName
  global Frame


  VideoName = value.Item6
  Time = value.Item7.TotalMilliseconds
  
  if Time == 0:
    Frame = 0
  
  Frame += 1

  Distance = str(value.Item1.Item1) + ";"
  MDistance = str(value.Item2.Item1) + ";"
  Speed = str(value.Item3.Item1) + ";"
  MSpeed = str(value.Item4.Item1) + ";"
  Mobility = str(value.Item5.Item1)

  DataCSV = VideoName + ";" + ";" + ";" + "Total;" + Distance + MDistance + Speed + MSpeed + Mobility
  
  return [DataCSV, Frame, value.Item3.Item3, value.Item4.Item3]
</q1:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="TakeLast">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>Time bins</q1:Name>
              <q1:Script>from System import Tuple

# &gt;&gt;&gt; GLOBAL VARIABLES &lt;&lt;&lt;

VideoFR = 0   # Video frame rate
TBins = 0     # Do you want time bins? (True/False)
Min = 0       # Minutes per time bin

################

Counter = 0
TBinFR = Min * 60 * VideoFR

################

@returns(bool)
def process(value):

  global Counter
  global VideoFR
  global TBins
  global Min
  global TBinFR

  VideoFR = value.Item2.Item1
  TBins = value.Item2.Item2[0]
  Min = value.Item2.Item3
  
  Time = value.Item1.TotalMilliseconds

  TBinFR = Min * 60 * VideoFR

  if Time == 0:
    Counter = 0

  Counter += 1

  if Counter == TBinFR+1:
    Counter = 0
    return True
  else:
    return False</q1:Script>
            </Expression>
            <Expression xsi:type="Condition">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge>
                    <From>0</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="q3:CsvWriter">
              <q3:FileName>C:\Users\User\Desktop\Microglia Project\Behavior Data\Pedro Behavior\OFT - 11.11.18 1st cohort\Data.csv</q3:FileName>
              <q3:Append>true</q3:Append>
              <q3:Overwrite>false</q3:Overwrite>
              <q3:Suffix>None</q3:Suffix>
              <q3:IncludeHeader>false</q3:IncludeHeader>
              <q3:Selector>Source</q3:Selector>
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>MANUAL</q1:Name>
              <q1:Script>from System import Tuple

#############################################
#    Here's the values to be set manually   #
################################################################################

VideoFR = 30      # Video frame rate (Frames per second)
TBinsEnable = 0   # Do you want time bins? (1/0)
Min = 10         # Minutes per time bin
Ratio = 0.12      # Conversion ratio pixel to centimeter
Error1 = 25       # Maximum number of pixels to move in one frame
Error5 = 100      # Maximum number pixels to move in five frames
Threshold = 1     # Minimum number of pixels to move on average in five frames
NumTBins = 6      # Total number of time bins pretended

################################################################################

TBins = [TBinsEnable,NumTBins]

################################################################################

@returns(Tuple[int,list,float,float,float,float,float])
def process(value):

  global VideoFR
  global Min
  global Ratio
  global Error1
  global Error5
  global Threshold
  global TBins

  return Tuple.Create(VideoFR,TBins,float(Min),float(Ratio),float(Error1),float(Error5),float(Threshold))</q1:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringCsvWriter">
              <MemberName>FileName</MemberName>
              <Name>ExcelName</Name>
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>NameToCSV</q1:Name>
              <q1:Script>@returns(str)
def process(value):
  
  a = value.split('\\')
  b = a[-1].split('.')
  c = b[0]
  d = ""
  for i in a[:-2]:
    d = d + i + '\\'
  e = d + "Data" + '.csv'

  return e</q1:Script>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>FileName</Name>
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>NameToCSV</q1:Name>
              <q1:Script>a = []
b = []
c = ""

@returns(str)
def process(value):
  
  global a
  global b 
  global c

  a = value.split('\\')
  b = a[-1].split('.')
  VideoName = b[0]

  return VideoName</q1:Script>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringStringProperty">
              <MemberName>Value</MemberName>
              <Name>Value</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>C:\Users\User\Desktop\Microglia Project\Behavior Data\Pedro Behavior\OFT - 11.11.18 1st cohort\Media Files\Trial     1.mpg</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>TBData</q1:Name>
              <q1:Script>from System import Tuple

DataCSV = ""
List = []
Counter = 0

@returns(list)
def process(value):
  
  global Counter
  global List
  global DataCSV

  VideoName = value.Item1.Item1
  TBDistance = value.Item1.Item2
  TBMDistance = value.Item1.Item3
  TBSpeed = value.Item1.Item4
  TBMSpeed = value.Item1.Item5
  TBMobility = value.Item1.Item6

  Time = value.Item3.TotalMilliseconds
  
  if Time == 0:
    DataCSV = ""
    List = []
    Counter = 0

  DataCSV = VideoName + ";" + ";" + ";" + TBDistance + TBMDistance + TBSpeed + TBMSpeed + TBMobility + "\n"

  List.append(DataCSV)

  return List</q1:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q1:PythonTransform">
              <q1:Name>WritetoCSV</q1:Name>
              <q1:Script>from System import Tuple

Header = 0
TBins = 1
Counter = 0 
Min = 0
VideoFR = 0
TotalValue = 0
Distance = 0
MDistance = 0
Speed = 0
MSpeed = 0
Mobility = 0
Ratio = 0

@returns(str)
def process(value):

  global Header
  global TBins
  global Counter 
  global VideoFR
  global TotalValue
  global Distance  
  global MDistance  
  global Speed  
  global MSpeed 
  global Mobility 
  global Ratio

  Ratio = value.Item3.Item4
  VideoFR = value.Item3.Item1
 
  TBins = value.Item3.Item2[0]
  FinalData = ""
  BinData = ""
  ActualMin = 0
  ActualMin2 = 0
  Timepoint = []
  Timepointz = ""

  FolderPath = value.Item4.split('\\')
  Folder = FolderPath[-2]
  Counter = 0

  Frame = value.Item1[1]
  if (Frame + 300) &gt; 60*VideoFR:
    m , s = divmod(((Frame+300)/VideoFR), 60)
  else:
    m = 0
    s = int(round((Frame+300)/60,0))
  Min = value.Item3.Item3
  VideoFR = value.Item3.Item1
  TBinFR = Min * 60 * VideoFR 
  
  Final = value.Item1[0]

  if Header == 0:
    Header = 1
    FinalData += "Folder;" + "FileName;" + "ID;" + "Condition;" + "Time;" + "Total Distance;" + "Total MDistance;" + "Average Speed;" + "Average MSpeed;" + "Time not Moving\n"

  if TBins == 1:
    for i in value.Item2:
      Counter += 1
      ActualMin = Min * Counter
      ActualMin2 = Min * (Counter-1)
      splitz = [x + ";" for x in i.split(";")]
      FileName = splitz[0]
      MobList = [(i.split(";")[-1])]
      Minutes1 = str(int(round(ActualMin2-0.5,0))) + "min" + str(int(round(((ActualMin2-int(round(ActualMin2-0.5,0)))*60),0))) + "sec"
      if ActualMin2 == 0:
        Minutes1= "0min"
      Minutes2 = str(int(round(ActualMin-0.5,0))) + "min" + str(int(round(((ActualMin-int(round(ActualMin-0.5,0)))*60),0))) + "sec"
      TimePoint = [str(Minutes1) + " to " + str(Minutes2) + ";"]
      Data = splitz[:3] + TimePoint + splitz[3:-1] + MobList
      for a in Data:
        BinData += a
      FinalData += (Folder + ";" + BinData).replace(".",",")
      BinData = ""
      
      ValueSplit = i.split(";")
      ValueFinal = Final.split(";")
      Distance += float(ValueSplit[-5])
      MDistance += float(ValueSplit[-4])
      Speed += float(ValueSplit[-3])
      MSpeed += float(ValueSplit[-2])
      Mobility += float(ValueSplit[-1])

    if Frame &gt;= ((Counter*TBinFR)+(TBinFR*0.1)): 
      FDistance = str(float(ValueFinal[-5]) - Distance) + ";"
      FMDistance = str(float(ValueFinal[-4]) - MDistance) + ";"
      if value.Item1[2] != 0:
        FSpeed = str((float(ValueFinal[-5]) - Distance)/value.Item1[2]*VideoFR) + ";"
      else:
        FSpeed = str(round((float(ValueFinal[-5]) - Distance)*VideoFR,1)) + ";"
      if value.Item1[3] != 0:
        FMSpeed = str((float(ValueFinal[-4]) - MDistance)/value.Item1[3]*VideoFR) + ";"
      else:
        FMSpeed = str(round((float(ValueFinal[-4]) - MDistance)*VideoFR,1)) + ";"
      FMobility = str(float(ValueFinal[-1]) - Mobility) + "\n"

      Minutes1 = str(int(round(ActualMin-0.5,0))) + "min" + str(int(round(((ActualMin-int(round(ActualMin-0.5,0)))*60),0))) + "sec"
      TimePointz = Minutes1 + " to End;"
    
      FinalBin = Folder + ";" + FileName + " ;" + " ;" + TimePointz + FDistance + FMDistance + FSpeed + FMSpeed + FMobility 
        
      FinalData += (FinalBin).replace(".",",")

  Counter = 0
  TotalValue = 0
  Distance = 0
  MDistance = 0
  Speed = 0
  MSpeed = 0
  Mobility = 0

  FinalData += (Folder + ";" + Final).replace(".",",")

  return FinalData</q1:Script>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>38</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>19</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>0</From>
              <To>40</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>0</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>45</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>53</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>0</To>
              <Label>Source5</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>32</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>2</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>33</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>8</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>5</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>4</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>12</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>13</From>
              <To>12</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>14</From>
              <To>13</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>15</From>
              <To>14</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>16</From>
              <To>15</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>17</From>
              <To>16</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>18</From>
              <To>17</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>19</From>
              <To>37</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>20</From>
              <To>25</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>22</From>
              <To>23</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>24</From>
              <To>20</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>25</From>
              <To>35</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>25</From>
              <To>31</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>26</From>
              <To>55</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>32</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>33</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>46</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>55</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>27</From>
              <To>0</To>
              <Label>Source7</Label>
            </Edge>
            <Edge>
              <From>28</From>
              <To>27</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>29</From>
              <To>28</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>29</From>
              <To>30</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>30</From>
              <To>28</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>31</From>
              <To>29</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>32</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>33</From>
              <To>34</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>34</From>
              <To>0</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>35</From>
              <To>36</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>36</From>
              <To>18</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>37</From>
              <To>26</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>38</From>
              <To>21</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>39</From>
              <To>56</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>40</From>
              <To>41</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>41</From>
              <To>39</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>42</From>
              <To>43</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>43</From>
              <To>37</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>45</From>
              <To>46</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>45</From>
              <To>5</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>45</From>
              <To>33</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>45</From>
              <To>8</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>45</From>
              <To>2</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>45</From>
              <To>32</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>45</From>
              <To>55</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>45</From>
              <To>39</To>
              <Label>Source3</Label>
            </Edge>
            <Edge>
              <From>46</From>
              <To>42</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>47</From>
              <To>44</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>48</From>
              <To>47</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>49</From>
              <To>48</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>49</From>
              <To>39</To>
              <Label>Source4</Label>
            </Edge>
            <Edge>
              <From>50</From>
              <To>52</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>51</From>
              <To>0</To>
              <Label>Source6</Label>
            </Edge>
            <Edge>
              <From>52</From>
              <To>53</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>53</From>
              <To>51</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>54</From>
              <To>39</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>55</From>
              <To>54</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>56</From>
              <To>44</To>
              <Label>Source2</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:GetFiles">
          <q3:Path>C:\Users\User\Desktop\Microglia Project\Behavior Data\Pedro Behavior\OFT - 11.11.18 1st cohort\Media Files</q3:Path>
          <q3:SearchPattern>*.mpg</q3:SearchPattern>
          <q3:SearchOption>AllDirectories</q3:SearchOption>
        </Combinator>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Concat" />
      </Expression>
      <Expression xsi:type="SelectMany">
        <Workflow>
          <Nodes>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="RepeatCount">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>1</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>1</From>
        <To>0</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>2</From>
        <To>3</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Reactive.Concat, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Skip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.LargestBinaryRegion, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BinaryRegionAnalysis, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FindContours, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Smooth, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.BackgroundSubtraction, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Grayscale, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Vision.FileCapture, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.FileCapture, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.SubtractBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Take, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Timestamp, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.Crop, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Vision.ColorBalance, Bonsai.Vision, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Gate, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.TakeLast, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.IO.CsvWriter, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Expressions.StringProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.StringProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.GetFiles, Bonsai.System, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.RepeatCount, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>